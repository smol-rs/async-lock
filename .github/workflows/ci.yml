name: CI

on:
  pull_request:
  push:
    branches:
      - master
  schedule:
    - cron: '0 2 * * *'

env:
  RUSTFLAGS: -D warnings
  RUST_BACKTRACE: 1

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        rust: [nightly, beta, stable]
    steps:
      - uses: actions/checkout@v3
      - name: Install Rust
        run: rustup update ${{ matrix.rust }} && rustup default ${{ matrix.rust }}
      - run: rustup target add wasm32-unknown-unknown
      - name: Install WASM Test Tools
        uses: taiki-e/install-action@wasm-pack
      - name: Run cargo check
        run: cargo check --all --all-features --all-targets
      - name: Run cargo check (without dev-dependencies to catch missing feature flags)
        if: startsWith(matrix.rust, 'nightly')
        run: cargo check -Z features=dev_dep
      - name: Run cargo check for WASM
        run: cargo check --all --all-features --all-targets --target wasm32-unknown-unknown
      - name: Test WASM
        run: wasm-pack test --headless --chrome
      - run: cargo test --all

  msrv:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # When updating this, the reminder to update the minimum supported
        # Rust version in Cargo.toml and .clippy.toml.
        rust: ['1.43']
    steps:
      - uses: actions/checkout@v3
      - name: Install Rust
        run: rustup update ${{ matrix.rust }} && rustup default ${{ matrix.rust }}
      - run: cargo build

  clippy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install Rust
        run: rustup update stable
      - uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features -- -W clippy::all

  fmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install Rust
        run: rustup update stable
      - run: cargo fmt --all -- --check

  miri:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install Rust
        run: rustup toolchain install nightly --component miri && rustup default nightly
      - run: cargo miri test
        env:
          # -Zmiri-ignore-leaks is needed because we use detached threads in doctests
          # TODO: remove -Zmiri-disable-weak-memory-emulation
          MIRIFLAGS: -Zmiri-strict-provenance -Zmiri-symbolic-alignment-check -Zmiri-disable-isolation -Zmiri-disable-weak-memory-emulation -Zmiri-ignore-leaks
          RUSTFLAGS: ${{ env.RUSTFLAGS }} -Z randomize-layout

  security_audit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/audit-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
